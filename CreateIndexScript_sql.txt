-- 
-- this script creates an index script based on the database this script is run against 
-- 

Use MedCompass
select 
'if (indexproperty(object_id(N''['+schema_name(t.[schema_id])+'].['+t.[name]+']''), N'''+i.[name]+''', N''indexid'') is null) '+ 
'CREATE '+ 
( 
case 
when 
(i.[is_unique]=1) 
then 
('UNIQUE ') 
else 
('') 
end 
)+ 
i.[type_desc] collate database_default+' '+ 
'INDEX ['+i.[name]+'] ON ['+schema_name(t.[schema_id])+'].['+t.[name]+'] '+ 
'('+substring(tmp3.[keycolumns],1,len(tmp3.[keycolumns])-1)+') '+isnull('INCLUDE ('+substring(tmp2.[includedcolumns],1,len(tmp2.[includedcolumns])-1)+') ','')+ 
isnull('where ('+i.[filter_definition]+') ','')+'WITH ('+ 
( 
case 
when 
(i.[is_padded]=1) 
then 
('PAD_INDEX = ON, ') 
else 
('PAD_INDEX = OFF, ') 
end 
)+ 
( 
case 
when 
(st.[no_recompute]=0) 
then 
('STATISTICS_NORECOMPUTE = OFF, ') 
else 
('STATISTICS_NORECOMPUTE = ON, ') 
end 
)+ 
'SORT_IN_TEMPDB = OFF, '+ 
( 
case 
when 
(i.[type_desc] collate database_default='CLUSTERED' and i.[ignore_dup_key]=1) 
then 
('IGNORE_DUP_KEY = ON, ') 
when 
(i.[type_desc] collate database_default='CLUSTERED' and i.[ignore_dup_key]=0) 
then 
('IGNORE_DUP_KEY = OFF, ') 
else 
('') 
end 
)+ 
'DROP_EXISTING = OFF, '+ 
'ONLINE = OFF, '+ 
( 
case 
when 
(i.[allow_row_locks]=1) 
then 
('ALLOW_ROW_LOCKS = ON, ') 
else 
('ALLOW_ROW_LOCKS = OFF, ') 
end 
)+ 
( 
case 
when 
(i.[allow_page_locks]=1) 
then 
('ALLOW_PAGE_LOCKS = ON, ') 
else 
('ALLOW_PAGE_LOCKS = OFF, ') 
end 
)+ 
( 
case 
when 
(i.[fill_factor]=0) 
then 
('FILLFACTOR = 100') 
else 
('FILLFACTOR = '+convert(nvarchar(256),i.[fill_factor])) 
end 
)+ 
') on ['+ds.[name]+'] ' [CreateIndexScript] 
from [sys].[indexes] i 
inner join [sys].[tables] t on 
( 
t.[object_id]=i.[object_id] 
and 
t.[is_ms_shipped]=0 
) 
inner join [sys].[sysindexes] si on 
( 
i.[object_id]=si.[id] 
and 
i.[index_id]=si.[indid] 
) 
inner join 
( 
select 
ic2.[object_id] [object_id], 
ic2.[index_id] [index_id], 
( 
select 
'['+c.[name]+'] '+ 
( 
case 
when 
(max(convert(int,ic1.[is_descending_key]))=1) 
then 
('DESC, ') 
else 
('ASC, ') 
end 
) 
from [sys].[index_columns] ic1 
inner join [sys].[columns] c on 
( 
c.[object_id]=ic1.[object_id] 
and 
c.[column_id]=ic1.[column_id] 
and 
ic1.[is_included_column]=0 
) 
where 
( 
ic1.[object_id]=ic2.[object_id] 
and 
ic1.[index_id]=ic2.[index_id] 
) 
group by 
ic1.[object_id], 
c.[name], 
[index_id] 
order by 
max(ic1.[key_ordinal]) for xml path('') 
) [keycolumns] 
from [sys].[index_columns] ic2 
group by 
ic2.[object_id], 
ic2.[index_id] 
) 
tmp3 on 
( 
i.[object_id]=tmp3.[object_id] 
and 
i.[index_id]=tmp3.[index_id] 
) 
inner join [sys].[stats] st on 
( 
st.[object_id]=i.[object_id] 
and 
st.[stats_id]=i.[index_id] 
) 
inner join [sys].[data_spaces] ds on i.[data_space_id]=ds.[data_space_id] 
inner join [sys].[filegroups] fg on i.[data_space_id]=fg.[data_space_id] 
left outer join 
( 
select 
tmp1.[object_id], 
tmp1.[index_id], 
tmp1.[includedcolumns] 
from 
( 
select 
ic2.[object_id] [object_id], 
ic2.[index_id] [index_id], 
( 
select 
'['+c.[name]+'], ' 
from [sys].[index_columns] ic1 
inner join [sys].[columns] c on 
( 
c.[object_id]=ic1.[object_id] 
and 
c.[column_id]=ic1.[column_id] 
and 
ic1.[is_included_column]=1 
) 
where 
( 
ic1.[object_id]=ic2.[object_id] 
and 
ic1.[index_id]=ic2.[index_id] 
) 
group by 
ic1.[object_id], 
c.[name], 
ic1.[index_id] for xml path('') 
) [includedcolumns] 
from [sys].[index_columns] ic2 
group by 
ic2.[object_id], 
ic2.[index_id] 
) tmp1 
where 
( 
not (tmp1.[includedcolumns] is null) 
) 
) tmp2 on 
( 
tmp2.[object_id]=i.[object_id] 
and 
tmp2.[index_id]=i.[index_id] 
) 
where 
( 
i.[is_primary_key]=0 
and 
i.[is_unique_constraint]=0 
) 
